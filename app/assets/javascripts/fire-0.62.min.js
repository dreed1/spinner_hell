/*Jquery fire plugin: http://www.computableminds.com/jquery-plugin-fire-animation-texture-generator.html */
(function ($) {
  Fire = function(options) {
    this.init(options);
  }

  Fire.prototype.init = function(options) {
    this.IDP = 0;
    this.ID = 0;
    this.lookup = new Array();
    this.flippy = 0;

    defaults = {
      mode: 'anim',
      width: 0,
      height: 0,
      maxPow: 3,
      minPow: 1,
      gravity: 1,
      fireTransparency: 255,
      globalTransparency: 255,
      flameWidth: 2,
      flameHeight: 3,
      fadingFlameSpeed: 2,
      yOffset: 0,
      plasm: false,
      cartoon: false,
      burnBorders: true,
      maxPowZone: 'random',
      speed: 60,
      loadMessage: '',
      showLoad: true,
      steps: 120
    };
    if (options) {
      $.extend(this, defaults, options);
    }
    this.C_SCREEN_OUT = 10 + this.flameHeight * 5;
    this.height += this.C_SCREEN_OUT;
    this.canvas = document.getElementById('hell-canvas');
    this.context = this.canvas.getContext("2d");
    this.pixels = this.context.getImageData(0,0,this.width, this.height);
    this.updateFireStuff(this.pixels.data);
    this.burn();
    this.recalculateLookup();
  }

  Fire.prototype.getSnapshot = function() {
    this.pixels = this.context.getImageData(0,0,this.width, this.height);
    for (var i=0;i<this.pixels.data.length;i+=4)
      {
      this.pixels.data[i+0]=0;
      this.pixels.data[i+1]=0;
      this.pixels.data[i+2]=0;
      this.pixels.data[i+3]=255;
      }
  }

  Fire.prototype.update = function() {
  }

  Fire.prototype.updateFireStuff = function(pixelData) {
    var colorR = 0,
        colorG = 0,
        colorMin, multiplier;
    var height6 = this.height - 6;
    var maxPowZone = this.maxPowZone;
    var pow = this.maxPow;
    var powAux = this.maxPow;
    var powInterp = 0;
    var flameWidth = this.flameWidth;
    var burnBorders = this.burnBorders;
    var borde = 5;
    var interpInc = 0;
    var steps = Math.ceil(this.width / flameWidth);
    var halfSteps = 0;
    var minPow = this.minPow;
    if (maxPowZone == 5) {
       maxPowZone = parseInt(Math.random() * 5)
    }
    switch (maxPowZone) {
    case 1:
      interpInc = ((pow - minPow) / steps) * -1;
      break;
    case 2:
      interpInc = (pow - minPow) / steps;
      powAux = minPow;
      break;
    case 3:
      halfSteps = Math.ceil(steps / 2);
      steps = 0;
      interpInc = (pow - minPow) / halfSteps;
      powAux = minPow;
      halfSteps++;
      break;
    case 4:
      halfSteps = Math.ceil(steps / 2);
      steps = 0;
      interpInc = ((pow - minPow) / halfSteps) * -1;
      halfSteps++;
      break;
    }
    for (var i = 0; i < this.width; i++) {
      if (i % flameWidth == 0) {
        switch (maxPowZone) {
        case 1:
        case 2:
          powAux += interpInc;
          pow = powAux;
          break;
        case 4:
        case 3:
          steps++;
          if (halfSteps == steps) {
            interpInc *= -1
          }
          powAux += interpInc;
          pow = powAux;
          break;
        }
        if (burnBorders == false) {
          if (i <= borde) {
            pow = 0
          } else {
            if (i > borde) {
              pow = powAux
            }
            if (i >= this.width - borde) {
              pow = 0
            }
          }
        }
        multiplier = Math.random() * pow;
        colorMin = Math.random() * 255;
        colorR = Math.random() * (255 - colorMin) + colorMin;
        colorG = Math.random() * colorR;
        colorR = parseInt(colorR * multiplier);
        if (colorR > 255) {
          colorR = 255
        }
        colorG = parseInt(colorG * multiplier);
        if (colorG > 255) {
          colorG = 255
        }
    }
    for (var j = height6; j < this.height; j++) {
        var idx = (j * this.width + i) << 2;
            pixelData[idx] = colorR;
            pixelData[idx + 1] = colorG;
            pixelData[idx + 3] = 255
            if((pixelData[idx] == 255) && (pixelData[idx + 1] == 255) && (pixelData[idx + 2] == 255)) {
              console.log('white')

            }
      }
    }

  };

  Fire.prototype.recalculateLookup = function() {
        this.lookup = new Array();
        for (var i = 0; i < 1280; i++) {
            var color = i / (this.gravity + 4.8);
            if (color > 255) {
                color = 255
            }
            if (color > this.fadingFlameSpeed) {
                color -= this.fadingFlameSpeed
            }
            if (this.cartoon) {
                if (color < 90 && color > 30) {
                    color = color - (color % 20)
                }
            }
            this.lookup[i] = parseInt(color);
        }
    }

  Fire.prototype.draw = function() {
    var _this = this;
    this.context.putImageData(_this.pixels, 0,0);
    this.updateFireStuff(_this.pixels.data);
    this.burn();
    this.recalculateLookup();
  }

  Fire.prototype.burn = function() {
    var _this = this;
    this.flippy ^= 1;
    if (this.flippy == 1) {
        this.burnIzq()
    } else {
        this.burnDer()
    }
  }

  Fire.prototype.burnIzq = function () {
        var width1 = this.width - 1;
        var height1 = this.height - 1;
        var i = width1,
            j = 0,
            colorR, color2R, color3R, colorG, color2G, color3G, ind, idx, idx2, idx3, idx4, trasp, jwidth, jj, j1, jm1;
        var i1 = 0,
            im1 = width1 - 1;
        var ibool = false;
        var wxh = this.width * this.height;
        var sumColors;
        var flameHeightW = this.flameHeight * this.width;
        for (var ii = 0; ii < wxh; ii++) {
            jj = j - this.flameHeight;
            if (jj >= 0) {
                jwidth = j * this.width;
                if (ibool) {
                    idx = (im1 + (jwidth)) << 2;
                    idx2 = (i1 + (jwidth)) << 2
                } else {
                    if (i == width1) {
                        idx = (im1 + (jwidth)) << 2;
                        idx2 = ((i - width1) + (jwidth)) << 2
                    } else {
                        idx = ((i + width1) + (jwidth)) << 2;
                        idx2 = (i1 + (jwidth)) << 2
                    }
                }
                color3R = this.pixels.data[idx] + this.pixels.data[idx2];
                color3G = this.pixels.data[idx + 1] + this.pixels.data[idx2 + 1];
                ind = i + jwidth;
                idx = ind << 2;
                j1 = (j != height1) ? this.width : 0;
                jm1 = (j != 0) ? this.width : 0;
                idx2 = (ind + j1) << 2;
                idx3 = (ind - jm1) << 2;
                color2R = this.pixels.data[idx] + this.pixels.data[idx2] + this.pixels.data[idx3];
                color2G = this.pixels.data[idx + 1] + this.pixels.data[idx2 + 1] + this.pixels.data[idx3 + 1];
                colorR = this.lookup[color2R + color3R];
                colorG = this.lookup[color2G + color3G];
                idx4 = (ind - flameHeightW) << 2;
                this.pixels.data[idx4] = colorR;
                this.pixels.data[idx4 + 1] = colorG;
                sumColors = colorR + colorG;
                if (this.fireTransparency != 255 && sumColors <= 10) {
                    trasp = 0
                } else {
                    trasp = (sumColors << 1) + this.fireTransparency
                } if (trasp > this.globalTransparency) {
                    trasp = this.globalTransparency
                }
                if (trasp < 0) {
                    trasp = 0
                }
                this.pixels.data[idx4 + 3] = trasp
            }
            j++;
            if (j == this.height) {
                j = 0;
                i--;
                i1 = i + 1;
                im1 = i - 1;
                ibool = (i != 0)
            }
        }
    };

  Fire.prototype.burnDer = function () {
        var width1 = this.width - 1;
        var height1 = this.height - 1;
        var i = 0,
            j = 0,
            colorR, color2R, color3R, colorG, color2G, color3G, ind, idx, idx2, idx3, idx4, trasp, jwidth, jj, j1, jm1;
        var i1 = 1,
            im1 = width1,
            ibool = false;
        var wxh = this.width * this.height;
        var sumColors;
        var flameHeightW = this.flameHeight * this.width;
        for (var ii = 0; ii < wxh; ii++) {
            jj = j - this.flameHeight;
            if (jj >= 0) {
                jwidth = j * this.width;
                if (ibool) {
                    idx = (im1 + (jwidth)) << 2;
                    idx2 = (i1 + (jwidth)) << 2
                } else {
                    if (i == width1) {
                        idx = (im1 + (jwidth)) << 2;
                        idx2 = ((i - width1) + (jwidth)) << 2
                    } else {
                        idx = ((i + width1) + (jwidth)) << 2;
                        idx2 = (i1 + (jwidth)) << 2
                    }
                }
                color3R = this.pixels.data[idx] + this.pixels.data[idx2];
                color3G = this.pixels.data[idx + 1] + this.pixels.data[idx2 + 1];
                ind = i + jwidth;
                idx = ind << 2;
                j1 = (j != height1) ? this.width : 0;
                jm1 = (j != 0) ? this.width : 0;
                idx2 = (ind + j1) << 2;
                idx3 = (ind - jm1) << 2;
                color2R = this.pixels.data[idx] + this.pixels.data[idx2] + this.pixels.data[idx3];
                color2G = this.pixels.data[idx + 1] + this.pixels.data[idx2 + 1] + this.pixels.data[idx3 + 1];
                colorR = this.lookup[color2R + color3R];
                colorG = this.lookup[color2G + color3G];
                idx4 = (ind - flameHeightW) << 2;
                this.pixels.data[idx4] = colorR;
                this.pixels.data[idx4 + 1] = colorG;
                sumColors = colorR + colorG;
                if (this.fireTransparency != 255 && sumColors <= 10) {
                    trasp = 0
                } else {
                    trasp = (sumColors << 1) + this.fireTransparency
                } if (trasp > this.globalTransparency) {
                    trasp = this.globalTransparency
                }
                if (trasp < 0) {
                    trasp = 0
                }
                this.pixels.data[idx4 + 3] = trasp
            }
            j++;
            if (j == this.height) {
                j = 0;
                i++;
                i1 = i + 1;
                im1 = i - 1;
                ibool = (i != width1)
            }
        }
    }; 
})(jQuery);;